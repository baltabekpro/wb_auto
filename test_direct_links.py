#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
"""

import requests
import time
from typing import Optional

def get_direct_download_link(token: str, file_path: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
    
    Args:
        token: OAuth —Ç–æ–∫–µ–Ω
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        
    Returns:
        –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ None
    """
    headers = {
        'Authorization': f'OAuth {token}',
        'Accept': 'application/json'
    }
    
    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω)
        publish_url = "https://cloud-api.yandex.net/v1/disk/resources/publish"
        params = {'path': file_path}
        
        response = requests.put(publish_url, headers=headers, params=params, timeout=30)
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        
        time.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ —Å –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        meta_url = "https://cloud-api.yandex.net/v1/disk/resources"
        params = {'path': file_path}
        
        response = requests.get(meta_url, headers=headers, params=params, timeout=30)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return None
            
        meta_data = response.json()
        public_url = meta_data.get('public_url')
        
        if not public_url:
            print(f"‚ùå –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {file_path}")
            return None
            
        print(f"üìé –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–µ API
        download_url = "https://cloud-api.yandex.net/v1/disk/public/resources/download"
        params = {'public_key': public_url}
        
        response = requests.get(download_url, params=params, timeout=30)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º download –∫–∞–∫ fallback
            return public_url + "&download=1"
            
        download_data = response.json()
        direct_link = download_data.get('href')
        
        if direct_link:
            print(f"‚úÖ –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {direct_link[:100]}...")
            return direct_link
        else:
            print(f"‚ùå –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º download –∫–∞–∫ fallback
            return public_url + "&download=1"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    TOKEN = "y0__xDfuNb6BRjs_jkg083yoxQw1_KTrwhbabBmRXLRvOpGmx6pPvI9gbp0RA"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "test_direct_link.txt"
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write("–¢–µ—Å—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    headers = {'Authorization': f'OAuth {TOKEN}'}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    upload_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {'path': f'/WB_AUTO_TEST/{test_file}', 'overwrite': 'true'}
    
    response = requests.get(upload_url, headers=headers, params=params, timeout=30)
    if response.status_code == 200:
        upload_data = response.json()
        upload_href = upload_data['href']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open(test_file, 'rb') as f:
            upload_response = requests.put(upload_href, data=f, timeout=30)
            
        if upload_response.status_code in [201, 202]:
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {test_file}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
            direct_link = get_direct_download_link(TOKEN, f'/WB_AUTO_TEST/{test_file}')
            
            if direct_link:
                print(f"üéâ –£—Å–ø–µ—Ö! –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_link}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                test_response = requests.get(direct_link, timeout=10)
                if test_response.status_code == 200:
                    print(f"‚úÖ –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–∫–∞—á–∞–Ω–æ {len(test_response.content)} –±–∞–π—Ç")
                else:
                    print(f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_response.status_code}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_response.status_code}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    import os
    if os.path.exists(test_file):
        os.remove(test_file)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
