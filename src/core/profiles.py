import json
import os
import sys
from dataclasses import dataclass
from typing import Any, Dict

def get_resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Ç–∞–∫ –∏ –≤ exe"""
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—É—Ç—å
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

@dataclass
class Profile:
    data: Dict[str, Any]

    def get(self, key: str, default=None):
        return self.data.get(key, default)

    @property
    def name(self) -> str:
        return self.data.get("name", "–ü—Ä–æ—Ñ–∏–ª—å")


def load_profile(path: str) -> Profile:
    with open(path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return Profile(data=data)


def list_profiles(folder: str = None) -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π."""
    result: Dict[str, str] = {}
    
    if folder is None:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
        folder = get_resource_path("profiles")
    
    print(f"üîç –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤: {folder}")
    
    if not os.path.isdir(folder):
        print(f"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
        return result
    
    files = os.listdir(folder)
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(files)}")
    
    for fn in files:
        if not fn.lower().endswith('.json'):
            continue
        full = os.path.join(folder, fn)
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {fn}")
        try:
            prof = load_profile(full)
            result[prof.name] = full
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {prof.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {fn}: {e}")
            continue
    
    print(f"üìã –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(result)}")
    return result
